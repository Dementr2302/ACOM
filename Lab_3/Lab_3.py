import numpy as np
import cv2

# изображение
image = cv2.imread('img.png', cv2.IMREAD_COLOR)

def gaussian(x, y, sigma):
    # Функция для вычисления значения двумерной функции Гаусса в точке (x, y)
    return 1 / (2 * np.pi * sigma ** 2) * np.exp(-(x ** 2 + y ** 2) / (2 * sigma ** 2))

def tasks1and2():
    size = 3  # Размерность матрицы (3x3)
    sigma = 1.0  # Среднеквадратичное отклонение /

    # Создаем матрицу Гаусса
    gaussian_matrix = np.zeros((size, size))  # Создание матрицы нулей размером (size, size)
    center = size // 2  # Вычисление центра матрицы

    # Заполнение матрицы значениями функции Гаусса
    for x in range(size):
        for y in range(size):
            gaussian_matrix[x, y] = gaussian(x - center, y - center, sigma)

    print("\ngaussian_matrix\n", gaussian_matrix)  # Вывод матрицы Гаусса в консоль

    # Нормализация матрицы (деление на сумму элементов)
    normalized_matrix = gaussian_matrix / np.sum(gaussian_matrix)
    print("\nnormalized_matrix\n", normalized_matrix)  # Вывод нормализованной матрицы в консоль

    return normalized_matrix  # Возвращает нормализованную матрицу
# Операция размытия (или фильтрации) изображения заключается в уменьшении
#  контрастности и выделения деталей на изображении.Это применяется для сглаживания шума, уменьшения высокочастотных
# компонентов и создания эффекта размытия
def task3():
    # Получите нормализованную матрицу из tasks1and2()
    kernel = tasks1and2()

    # Примените фильтр Гаусса
    blurred_image = cv2.filter2D(image, -1, kernel)

    # Сохраните результат
    cv2.imwrite('blurred_image_3.jpg', blurred_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

# Операция свертки матрицы: Операция свертки матрицы (или ядра) представляет собой математическую операцию,
# при которой ядро перемещается по элементам изображения, и для каждой позиции выполняется умножение элементов изображения на
# соответствующие элементы ядра, а затем суммирование результатов.

# Ядро представляет собой шаблон весов, который применяется к пикселям изображения в процессе свертки.

# Матрица свертки в размытии по Гауссу: Матрица свертки в размытии по Гауссу представляет собой 2D матрицу (ядро),
# которая формируется на основе гауссовой функции. Эта матрица определяет, как веса пикселей изображения должны учитываться при
# операции размытия.
def task4():
    # Параметры для первой фильтрации
    sigma1 = 1.0
    size1 = 3

    # Создайте матрицу Гаусса и нормализуйте ее
    gaussian_matrix1 = np.zeros((size1, size1))
    center1 = size1 // 2
    # for x in range(size1): перебирает значения от 0 до size1 - 1 для переменной x.
    # for y in range(size1): перебирает значения от 0 до size1 - 1 для переменной y.
    # gaussian_matrix1[x, y] = Здесь происходит присваивание значения элементу матрицы gaussian_matrix1 по координатам (x, y).
    # 1 / (2 * np.pi * sigma1 ** 2): Это нормализующий коэффициент для обеспечения того, чтобы сумма значений в
    # матрице была равна 1. стандартная формула для нормализации Гауссовского распределения.
    # np.exp(-((x - center1) ** 2 + (y - center1) ** 2) / (2 * sigma1 ** 2)): часть формулы Гауссовского
    # распределения, где вычисляется экспонента от отрицательной величины. Эта часть определяет, как быстро
    # значения убывают от центра (где (x, y) = (center1, center1)) к краям.

    # двумерное распределение Гаусса
    for x in range(size1):
        for y in range(size1):
            gaussian_matrix1[x, y] = (1 / (2 * np.pi * sigma1 ** 2)) * np.exp(
                -((x - center1) ** 2 + (y - center1) ** 2) / (2 * sigma1 ** 2))

    normalized_matrix1 = gaussian_matrix1 / np.sum(gaussian_matrix1)

    # Примените фильтр Гаусса с первыми параметрами
    blurred_image1 = cv2.filter2D(image, -1, normalized_matrix1)

    # Параметры для второй фильтрации
    sigma2 = 2.0
    size2 = 7

    # Создайте матрицу Гаусса и нормализуйте ее
    gaussian_matrix2 = np.zeros((size2, size2))
    center2 = size2 // 2

    for x in range(size2):
        for y in range(size2):
            gaussian_matrix2[x, y] = (1 / (2 * np.pi * sigma2 ** 2)) * np.exp(
                -((x - center2) ** 2 + (y - center2) ** 2) / (2 * sigma2 ** 2))

    normalized_matrix2 = gaussian_matrix2 / np.sum(gaussian_matrix2)

    # Примените фильтр Гаусса с вторыми параметрами
    # применяем свертку (фильтрацию) к изображению.
    # параметр, указывающий, что глубина (глубина цвета) изображения остается неизменной.
    # normalized_matrix2 - это ядро (матрица свертки), которое мы применяем к изображению.
    blurred_image2 = cv2.filter2D(image, -1, normalized_matrix2)

    # Сохраните результаты
    cv2.imwrite('blurred_image4_1.jpg', blurred_image1)
    cv2.imwrite('blurred_image4_2.jpg', blurred_image2)

# Алгоритм размытия по Гауссу: Для размытия по Гауссу сначала строится матрица свертки на основе гауссовой функции.
# Затем эта матрица нормализуется. После этого применяется операция свертки между изображением и матрицей свертки,
# чтобы получить размытое изображение.

# 5.Параметры размытия по Гауссу: Параметры размытия по Гауссу включают стандартное отклонение гауссовой функции
# (определяет степень размытия) и размер ядра (определяет, насколько далеко распространяются веса от центрального пикселя).
def task5():
    # Параметры для первой фильтрации
    sigma1 = 1.0
    size1 = 3
    # cv2.GaussianBlur - это функция в библиотеке OpenCV, предназначенная
    # для применения размытия Гаусса к изображению. Размытие Гаусса используется
    # для сглаживания изображения путем уменьшения резкости и подавления высокочастотных шумов
    # Примените встроенную функцию размытия Гаусса
    blurred_image1_opencv = cv2.GaussianBlur(image, (size1, size1), sigma1)

    # Параметры для второй фильтрации
    sigma2 = 2.0
    size2 = 7
    # Фильтрация по Гауссу средствами OpenCV: В OpenCV для фильтрации по Гауссу используется функция cv2.GaussianBlur().
    # Эта функция принимает изображение, размер ядра (kernel_size) и стандартное отклонение (sigma) гауссовой функции в
    # качестве аргументов и возвращает размытое изображение.
    # Примените встроенную функцию размытия Гаусса
    blurred_image2_opencv = cv2.GaussianBlur(image, (size2, size2), sigma2)

    # Сохраните результаты
    cv2.imwrite('blurred_image1_opencv5_1.jpg', blurred_image1_opencv)
    cv2.imwrite('blurred_image2_opencv5_2.jpg', blurred_image2_opencv)


tasks1and2()
task3()
task4()
task5()
